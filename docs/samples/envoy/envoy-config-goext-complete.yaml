node:
  id: local
  cluster: local

static_resources:
#  secrets:
#    - name: token
#      generic_secret:
#        secret:
#          inline_string: xxxEXAMPLExxx
#
#    - name: hmac
#      generic_secret:
#        secret:
#          inline_string: xxxEXAMPLExxx

  listeners:
    - name: main
      address:
        socket_address:
          address: 0.0.0.0
          port_value: 18000
      filter_chains:
        - filters:
            - name: envoy.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                stat_prefix: ingress_http
                codec_type: auto
                generate_request_id: false
                route_config:
                  name: local_route
                  virtual_hosts:
                    - name: local_service
                      domains:
                        - "*"
                      routes:
                        - match:
                            prefix: "/"
                          route:
                            cluster: web_service
                http_filters:
                  ######################################################################################################
                  # Ref: https://github.com/achetronic/oauthep
                  ######################################################################################################
                  - name: envoy.filters.http.golang
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.golang.v3alpha.Config
                      plugin_name: oauthep
                      library_id: oauthep-v1
                      library_path: "/path/to/liboauthep.so"

                      plugin_config:
                        "@type": type.googleapis.com/xds.type.v3.TypedStruct
                        value:
                          # Logging configuration
                          log_format: "json"
                          log_level: "debug"
                          log_all_headers: true
                          exclude_log_headers:
                            - "request:authorization"
                            - "request:cookie"
                            - "response:set-cookie"

                          # How to calculate real IP of the client
                          #trusted_proxies_mode: default
                          trusted_proxies_mode: xforwarded
                          trusted_proxies:
                            - '172.16.0.0/12'
                            - '10.254.0.0/16'
                            - '203.0.113.0/24'

                          # Authentication exclusions
                          skip_auth_cidr:
                            - '10.0.0.0/8'
                            - '192.168.0.0/16'

                          skip_auth_regex:
                            - "/health"
                            - "/static/*"

                          # Authentication paths
                          callback_path: "/oauth/callback"
                          logout_path: "/oauth/logout"
                          logout_redirect_after_uri: "https://keycloak.example.com/realms/master/protocol/openid-connect/logout"
                          error_path: "/oauth/error"

                          # Supported providers: google, openid (default)
                          provider: openid

                          # OAuth configuration
                          oauth_auth_uri: "https://keycloak.example.com/realms/master/protocol/openid-connect/auth"
                          oauth_token_uri: "https://keycloak.example.com/realms/master/protocol/openid-connect/token"
                          oauth_jwks_uri: "https://keycloak.example.com/realms/master/protocol/openid-connect/certs"
                          oauth_jwks_cache_ttl: "10m"
                          oauth_jwks_cache_file: "/tmp/jwks_cache.json"

                          oauth_client_id: "example"

                          # Oauth Client Secret can be read from: literal values, environment vars, SDS.
                          # This allows to use this extension in pure-Envoy deployments, and when Istio
                          # is present injecting the sidecar. To know more, read the samples in docs/samples/istio
                          oauth_client_secret: "xxxEXAMPLExxx"
                          #oauth_client_secret: "${env:EXAMPLE_VAR}"
                          #oauth_client_secret: "${sds:example_name}"

                          oauth_redirect_uri: "http://localhost:18000/oauth/callback"
                          oauth_scopes:
                            - "openid"
                            - "profile"
                            - "email"

                          # CEL expressions to fine tune allowance. JWT payload is available under object 'payload'
                          #- expression: 'payload.groups.exists(group, group in ["admin", "editor"])'
                          #- expression: 'has(payload.email) && payload.email.endsWith("@example.com")'
                          oauth_claim_allow_conditions:
                            - expression: 'has(payload.iss) && payload.iss == "https://auth.mycompany.com"'

                            - expression: 'has(payload.email_verified) && payload.email_verified == true'
                            - expression: 'has(payload.email) && payload.email.endsWith("@example.com")'

                            - expression: 'has(payload.sub) && payload.sub != ""'
                            - expression: 'has(payload.aud) && payload.aud == "my-api"'

                          # Session cookie configuration
                          session_cookie_prefix: "oauthep_"
                          session_cookie_domain: ""
                          session_cookie_secure: true
                          session_cookie_httponly: true
                          session_cookie_samesite: "Lax"
                          session_cookie_path: "/"
                          session_cookie_duration: "2d"

                          session_cookie_compression_enabled: true

                      generic_secrets:
                        - name: example_name
                          sds_config:
                            path_config_source:
                              path: "/path/to/sds-secret.yaml"

                  - name: envoy.filters.http.router
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router

    - name: staticreply
      address:
        socket_address:
          address: 127.0.0.1
          port_value: 8099
      filter_chains:
        - filters:
            - name: envoy.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                original_ip_detection_extensions:
                  - name: envoy.extensions.http.original_ip_detection.custom_header
                    typed_config:
                      "@type": "type.googleapis.com/envoy.extensions.http.original_ip_detection.custom_header.v3.CustomHeaderConfig"
                      allow_extension_to_set_address_as_trusted: true
                      header_name: "x-real-client-ip"
                stat_prefix: ingress_http
                codec_type: auto
                route_config:
                  name: local_route
                  virtual_hosts:
                    - name: local_service
                      domains:
                        - "*"
                      routes:
                        - match:
                            prefix: "/"
                          direct_response:
                            status: 200
                            body:
                              inline_string: "example body\n"
                http_filters:
                  - name: envoy.filters.http.router
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router

  clusters:
    - name: oauth
      connect_timeout: 5s
      type: LOGICAL_DNS
      lb_policy: ROUND_ROBIN
      load_assignment:
        cluster_name: oauth
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: keycloak.example.com
                      port_value: 443
      transport_socket:
        name: envoy.transport_sockets.tls
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
          sni: keycloak.example.com

    - name: web_service
      connect_timeout: 0.25s
      type: STATIC
      lb_policy: ROUND_ROBIN
      load_assignment:
        cluster_name: mock_service
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: 127.0.0.1
                      port_value: 8099

admin:
  access_log_path: "/dev/null"
  address:
    socket_address:
      address: 0.0.0.0
      port_value: 8001